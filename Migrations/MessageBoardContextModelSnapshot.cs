// <auto-generated />
using System;
using JeremySkippen.MessageBoard;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JeremySkippen.MessageBoard.Migrations
{
    [DbContext(typeof(MessageBoardContext))]
    partial class MessageBoardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.30");

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.Posting", b =>
                {
                    b.Property<Guid>("PostingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("PostingDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("PostingId");

                    b.HasIndex("PostedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Postings");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.UserFollow", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserFollow");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.Posting", b =>
                {
                    b.HasOne("JeremySkippen.MessageBoard.DomainModel.User", "PostedBy")
                        .WithMany("Postings")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeremySkippen.MessageBoard.DomainModel.Project", "Project")
                        .WithMany("Postings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.UserFollow", b =>
                {
                    b.HasOne("JeremySkippen.MessageBoard.DomainModel.Project", "Project")
                        .WithMany("ProjectFollowedByUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeremySkippen.MessageBoard.DomainModel.User", "User")
                        .WithMany("UserFollowingProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.Project", b =>
                {
                    b.Navigation("Postings");

                    b.Navigation("ProjectFollowedByUsers");
                });

            modelBuilder.Entity("JeremySkippen.MessageBoard.DomainModel.User", b =>
                {
                    b.Navigation("Postings");

                    b.Navigation("UserFollowingProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
